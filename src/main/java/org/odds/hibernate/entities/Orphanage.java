package org.odds.hibernate.entities;
// Generated May 31, 2013 1:32:30 AM by Hibernate Tools 3.2.1.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Orphanage generated by hbm2java
 */
@Entity
@Table(name="orphanage"
    ,catalog="odds_db"
)
public class Orphanage  implements java.io.Serializable {


     private Integer id;
     private String name;
     private String location;
     private String details;
     private Date time;
     private Set<OrphanageAddress> orphanageAddresses = new HashSet<OrphanageAddress>(0);
     private Set<User> users = new HashSet<User>(0);
     private Set<Record> records = new HashSet<Record>(0);
     private Set<OrphanageContact> orphanageContacts = new HashSet<OrphanageContact>(0);
     private Set<Children> childrens = new HashSet<Children>(0);

    public Orphanage() {
    }

    public Orphanage(String name, String location, String details, Date time, Set<OrphanageAddress> orphanageAddresses, Set<User> users, Set<Record> records, Set<OrphanageContact> orphanageContacts, Set<Children> childrens) {
       this.name = name;
       this.location = location;
       this.details = details;
       this.time = time;
       this.orphanageAddresses = orphanageAddresses;
       this.users = users;
       this.records = records;
       this.orphanageContacts = orphanageContacts;
       this.childrens = childrens;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="name", length=128)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="location", length=45)
    public String getLocation() {
        return this.location;
    }
    
    public void setLocation(String location) {
        this.location = location;
    }
    
    @Column(name="details", length=65535)
    public String getDetails() {
        return this.details;
    }
    
    public void setDetails(String details) {
        this.details = details;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="time", length=19)
    public Date getTime() {
        return this.time;
    }
    
    public void setTime(Date time) {
        this.time = time;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="orphanage")
    public Set<OrphanageAddress> getOrphanageAddresses() {
        return this.orphanageAddresses;
    }
    
    public void setOrphanageAddresses(Set<OrphanageAddress> orphanageAddresses) {
        this.orphanageAddresses = orphanageAddresses;
    }
@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinTable(name="orphanage_admin", catalog="odds_db", joinColumns = { 
        @JoinColumn(name="orphanage_id", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="user_id", nullable=false, updatable=false) })
    public Set<User> getUsers() {
        return this.users;
    }
    
    public void setUsers(Set<User> users) {
        this.users = users;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="orphanage")
    public Set<Record> getRecords() {
        return this.records;
    }
    
    public void setRecords(Set<Record> records) {
        this.records = records;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="orphanage")
    public Set<OrphanageContact> getOrphanageContacts() {
        return this.orphanageContacts;
    }
    
    public void setOrphanageContacts(Set<OrphanageContact> orphanageContacts) {
        this.orphanageContacts = orphanageContacts;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="orphanage")
    public Set<Children> getChildrens() {
        return this.childrens;
    }
    
    public void setChildrens(Set<Children> childrens) {
        this.childrens = childrens;
    }




}


